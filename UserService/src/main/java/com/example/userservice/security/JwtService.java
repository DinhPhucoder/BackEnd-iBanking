package com.example.userservice.security;

import java.security.Key;
import java.util.Date;
import java.util.Map;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;

/**
 * üîê JWT SERVICE - L·ªöP X·ª¨ L√ù JWT TOKEN
 * 
 * JWT (JSON Web Token) l√† m·ªôt chu·∫©n ƒë·ªÉ t·∫°o token x√°c th·ª±c:
 * - Header: Thu·∫≠t to√°n m√£ h√≥a (HS256)
 * - Payload: Th√¥ng tin user (claims)
 * - Signature: Ch·ªØ k√Ω ƒë·ªÉ x√°c th·ª±c token
 * 
 * @Service: ƒê√°nh d·∫•u ƒë√¢y l√† Service layer
 */
@Service
public class JwtService {

    /**
     * üîë JWT SECRET KEY - KH√ìA B√ç M·∫¨T ƒê·ªÇ M√É H√ìA TOKEN
     * 
     * @Value("${security.jwt.secret}"): L·∫•y gi√° tr·ªã t·ª´ application.properties
     * - security.jwt.secret=ZmFrZV9zZWNyZXRfYmFzZTY0X2tleV9taW5fMzJfY2hhcnM=
     * - ƒê√¢y l√† Base64 encoded key
     */
    @Value("${security.jwt.secret}")
    private String jwtSecretBase64;

    /**
     * ‚è∞ TOKEN EXPIRATION TIME - TH·ªúI GIAN H·∫æT H·∫†N C·ª¶A TOKEN
     * 
     * @Value("${security.jwt.expiration-ms:3600000}"): 
     * - L·∫•y t·ª´ application.properties
     * - Default: 3600000ms = 1 gi·ªù
     * - security.jwt.expiration-ms=3600000
     */
    @Value("${security.jwt.expiration-ms:3600000}")
    private long expirationMs;

    /**
     * üîê T·∫†O SIGNING KEY - CHUY·ªÇN BASE64 SECRET TH√ÄNH KEY
     * 
     * @return Key: Kh√≥a ƒë·ªÉ k√Ω v√† x√°c th·ª±c JWT token
     * 
     * Qu√° tr√¨nh:
     * 1. Decode Base64 string th√†nh byte array
     * 2. T·∫°o HMAC-SHA256 key t·ª´ byte array
     */
    private Key getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(jwtSecretBase64);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    /**
     * üé´ T·∫†O JWT TOKEN - PH∆Ø∆†NG TH·ª®C CH√çNH ƒê·ªÇ T·∫†O TOKEN
     * 
     * @param subject: Ch·ªß th·ªÉ c·ªßa token (th∆∞·ªùng l√† username)
     * @param claims: Th√¥ng tin b·ªï sung (userId, fullName, email...)
     * @return String: JWT token ƒë√£ ƒë∆∞·ª£c m√£ h√≥a
     * 
     * V√≠ d·ª• token ƒë∆∞·ª£c t·∫°o:
     * eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjEsImZ1bGxOYW1lIjoiTmd1eWVuIFZhbiBBIiwiZW1haWwiOiJ0ZXN0QGV4YW1wbGUuY29tIiwic3ViIjoidGVzdHVzZXIiLCJpYXQiOjE2MzI4NzQ0MDAsImV4cCI6MTYzMjg3ODAwMH0.signature
     */
    public String generateToken(String subject, Map<String, Object> claims) {
        Date now = new Date();                                    // Th·ªùi gian hi·ªán t·∫°i
        Date expiry = new Date(now.getTime() + expirationMs);     // Th·ªùi gian h·∫øt h·∫°n
        
        return Jwts.builder()
                .setClaims(claims)                    // Th√™m claims (userId, fullName, email...)
                .setSubject(subject)                  // Set subject (username)
                .setIssuedAt(now)                     // Th·ªùi gian t·∫°o token
                .setExpiration(expiry)                // Th·ªùi gian h·∫øt h·∫°n
                .signWith(getSigningKey(), SignatureAlgorithm.HS256)  // K√Ω token v·ªõi HMAC-SHA256
                .compact();                          // T·∫°o token string
    }

    /**
     * üîç PARSE JWT TOKEN - GI·∫¢I M√É V√Ä X√ÅC TH·ª∞C TOKEN
     * 
     * @param token: JWT token c·∫ßn gi·∫£i m√£
     * @return Claims: Th√¥ng tin trong token (userId, fullName, email...)
     * @throws Exception: N·∫øu token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n
     * 
     * S·ª≠ d·ª•ng khi:
     * - X√°c th·ª±c request t·ª´ client
     * - L·∫•y th√¥ng tin user t·ª´ token
     * - Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng
     */
    public Claims parseToken(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(getSigningKey())       // Set key ƒë·ªÉ x√°c th·ª±c
                .build()
                .parseClaimsJws(token)               // Parse v√† x√°c th·ª±c token
                .getBody();                          // L·∫•y claims t·ª´ token
    }
}


