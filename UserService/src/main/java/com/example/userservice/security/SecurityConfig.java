package com.example.userservice.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

/**
 * üõ°Ô∏è SECURITY CONFIG - C·∫§U H√åNH B·∫¢O M·∫¨T CHO ·ª®NG D·ª§NG
 * 
 * @Configuration: ƒê√°nh d·∫•u ƒë√¢y l√† class c·∫•u h√¨nh Spring
 * @EnableWebSecurity: K√≠ch ho·∫°t Spring Security cho web application
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - C·∫•u h√¨nh authentication (x√°c th·ª±c)
 * - C·∫•u h√¨nh authorization (ph√¢n quy·ªÅn)
 * - C·∫•u h√¨nh CORS (Cross-Origin Resource Sharing)
 * - C·∫•u h√¨nh CSRF protection
 */
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    /**
     * üîê PASSWORD ENCODER BEAN - C·∫§U H√åNH M√É H√ìA PASSWORD
     * 
     * @Bean: T·∫°o bean PasswordEncoder ƒë·ªÉ Spring c√≥ th·ªÉ inject
     * 
     * BCryptPasswordEncoder:
     * - Thu·∫≠t to√°n m√£ h√≥a m·∫°nh (bcrypt)
     * - T·ª± ƒë·ªông t·∫°o salt (mu·ªëi) ƒë·ªÉ tƒÉng b·∫£o m·∫≠t
     * - M·ªói l·∫ßn m√£ h√≥a c√πng 1 password s·∫Ω cho k·∫øt qu·∫£ kh√°c nhau
     * 
     * V√≠ d·ª•:
     * - Password: "123456"
     * - Encoded: "$2a$10$N9qo8uLOickgx2ZMRZoMye..."
     */
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            // üåê CORS CONFIGURATION - Cho ph√©p request t·ª´ domain kh√°c
            .cors(Customizer.withDefaults())

            // üö´ CSRF PROTECTION - T·∫Øt CSRF v√¨ d√πng JWT
            .csrf(csrf -> csrf.disable())

            // üì± SESSION MANAGEMENT - Stateless (kh√¥ng l∆∞u session)
            .sessionManagement(sm -> sm.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

            // üîê AUTHORIZATION - Ph√¢n quy·ªÅn truy c·∫≠p endpoints
            .authorizeHttpRequests(auth -> auth
                    .requestMatchers("/users/**").permitAll()
                    .requestMatchers("/api/auth/**").permitAll()
                    .anyRequest().authenticated()                 // C√°c endpoint kh√°c c·∫ßn x√°c th·ª±c
            );

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        
        // üåç ALLOWED ORIGINS - C√°c domain ƒë∆∞·ª£c ph√©p g·ªçi API
        configuration.setAllowedOrigins(List.of("*"));  // "*" = cho ph√©p t·∫•t c·∫£ domain
        
        // üì° ALLOWED METHODS - C√°c HTTP methods ƒë∆∞·ª£c ph√©p
        configuration.setAllowedMethods(List.of("GET", "POST", "PUT", "DELETE", "OPTIONS"));
        
        // üìã ALLOWED HEADERS - C√°c header ƒë∆∞·ª£c ph√©p g·ª≠i
        configuration.setAllowedHeaders(List.of("Authorization", "Content-Type"));
        
        // üì§ EXPOSED HEADERS - C√°c header ƒë∆∞·ª£c ph√©p tr·∫£ v·ªÅ
        configuration.setExposedHeaders(List.of("Authorization"));
        
        // üîß REGISTER CORS CONFIGURATION
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration);  // √Åp d·ª•ng cho t·∫•t c·∫£ endpoints
        
        return source;
    }
}


