package com.example.userservice.repository;

import java.util.Optional;

import org.springframework.data.jpa.repository.JpaRepository;

import com.example.userservice.model.User;

/**
 * üóÑÔ∏è USER REPOSITORY - L·ªöP TRUY C·∫¨P DATABASE CHO USER
 * 
 * JpaRepository<User, Long>:
 * - User: Entity type (ki·ªÉu d·ªØ li·ªáu)
 * - Long: Ki·ªÉu d·ªØ li·ªáu c·ªßa Primary Key (userId)
 * 
 * JpaRepository cung c·∫•p s·∫µn c√°c method:
 * - save(User user): L∆∞u user v√†o database
 * - findById(Long id): T√¨m user theo ID
 * - findAll(): L·∫•y t·∫•t c·∫£ user
 * - deleteById(Long id): X√≥a user theo ID
 * - count(): ƒê·∫øm s·ªë l∆∞·ª£ng user
 */
public interface UserRepository extends JpaRepository<User, Long> {
    
    /**
     * üîç T√åM USER THEO USERNAME
     * 
     * @param username: T√™n ƒëƒÉng nh·∫≠p c·∫ßn t√¨m
     * @return Optional<User>: 
     * - N·∫øu t√¨m th·∫•y: Optional ch·ª©a User object
     * - N·∫øu kh√¥ng t√¨m th·∫•y: Optional.empty()
     * 
     * Spring Data JPA t·ª± ƒë·ªông t·∫°o implementation:
     * SELECT * FROM users WHERE username = ?
     */
    Optional<User> findByUsername(String username);
    
    /**
     * ‚úÖ KI·ªÇM TRA USERNAME ƒê√É T·ªíN T·∫†I CH∆ØA
     * 
     * @param username: T√™n ƒëƒÉng nh·∫≠p c·∫ßn ki·ªÉm tra
     * @return boolean: 
     * - true: Username ƒë√£ t·ªìn t·∫°i
     * - false: Username ch∆∞a t·ªìn t·∫°i
     * 
     * Spring Data JPA t·ª± ƒë·ªông t·∫°o implementation:
     * SELECT COUNT(*) > 0 FROM users WHERE username = ?
     */
    boolean existsByUsername(String username);
    
    /**
     * ‚úÖ KI·ªÇM TRA EMAIL ƒê√É T·ªíN T·∫†I CH∆ØA
     * 
     * @param email: Email c·∫ßn ki·ªÉm tra
     * @return boolean:
     * - true: Email ƒë√£ t·ªìn t·∫°i
     * - false: Email ch∆∞a t·ªìn t·∫°i
     * 
     * Spring Data JPA t·ª± ƒë·ªông t·∫°o implementation:
     * SELECT COUNT(*) > 0 FROM users WHERE email = ?
     */
    boolean existsByEmail(String email);
}


